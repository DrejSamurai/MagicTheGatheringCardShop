@model IEnumerable<IntegratedSystems.Domain.Domain_Models.Expansion>

@{
    ViewData["Title"] = "Expansions";
    Layout = "~/Views/Shared/_Layout.cshtml";
    int pageSize = 6; 
}

<div class="container mt-4">
    <div class="d-flex justify-content-end mb-4">
        <a asp-action="Create" class="btn btn-danger">Create New</a>
    </div>
    <div class="row" id="expansion-container">
        @foreach (var item in Model)
        {
            <div class="col-md-6 col-lg-4 mb-4 expansion-item" data-id="@item.Id">
                <div class="card d-flex flex-column" style="background-color: #2e323c; color: white;">
                    <div class="card-img-container">
                        <img src="@item.ExpansionImage" class="card-img-top" alt="Expansion image" />
                    </div>
                    <div class="card-body d-flex flex-column">
                        <h5 class="card-title">@item.ExpansionName</h5>
                        <h6 class="card-subtitle mb-2 text-muted">@item.ExpansionDescription</h6>
                        <p class="card-text"><strong>Rating:</strong> @item.Rating</p>
                        <p class="card-text"><strong>Card Number:</strong> @item.CardNumber</p>
                        <div class="button-container mt-auto">
                            <a asp-action="Edit" asp-route-id="@item.Id" class="card-link btn btn-custom">Edit</a>   
                            <a asp-action="Delete" asp-route-id="@item.Id" class="card-link btn btn-custom">Delete</a>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>

    <nav aria-label="Page navigation">
        <ul class="pagination justify-content-center mt-4" id="pagination">
        </ul>
    </nav>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        const pageSize = @pageSize;
        const expansions = document.querySelectorAll('.expansion-item');
        const totalPages = Math.ceil(expansions.length / pageSize);
        const paginationContainer = document.getElementById('pagination');
        let currentPage = 1;

        function showPage(page) {
            expansions.forEach((expansion, index) => {
                expansion.style.display = (index >= (page - 1) * pageSize && index < page * pageSize) ? 'block' : 'none';
            });
            currentPage = page;
            updatePagination();
        }

        function updatePagination() {
            paginationContainer.innerHTML = '';

            const prevItem = document.createElement('li');
            prevItem.className = `page-item ${currentPage === 1 ? 'disabled' : ''}`;
            prevItem.innerHTML = `<a class="page-link" href="#" aria-label="Previous">&laquo;</a>`;
            prevItem.querySelector('a').addEventListener('click', () => {
                if (currentPage > 1) showPage(currentPage - 1);
            });
            paginationContainer.appendChild(prevItem);

            for (let i = 1; i <= totalPages; i++) {
                const pageItem = document.createElement('li');
                pageItem.className = `page-item ${i === currentPage ? 'active' : ''}`;
                pageItem.innerHTML = `<a class="page-link" href="#">${i}</a>`;
                pageItem.querySelector('a').addEventListener('click', () => {
                    showPage(i);
                });
                paginationContainer.appendChild(pageItem);
            }

            const nextItem = document.createElement('li');
            nextItem.className = `page-item ${currentPage === totalPages ? 'disabled' : ''}`;
            nextItem.innerHTML = `<a class="page-link" href="#" aria-label="Next">&raquo;</a>`;
            nextItem.querySelector('a').addEventListener('click', () => {
                if (currentPage < totalPages) showPage(currentPage + 1);
            });
            paginationContainer.appendChild(nextItem);

            showPage(currentPage);
        }

        updatePagination();
    });
</script>

<style>
    .expansion-item {
        display: block;
    }

    .card {
        display: flex;
        flex-direction: column;
        height: 100%;
    }

    .card-img-container {
        height: 200px; 
        overflow: hidden;
    }

    .card-img-top {
        width: 100%;
        height: 100%;
        object-fit: cover; 
    }

    .button-container {
        display: flex;
        flex-wrap: wrap;
        gap: 10px;
    }

    .btn-custom {
        background-color: #9ea2a8;
        color: white;
        border: none;
        padding: 10px 15px;
        border-radius: 5px;
        text-align: center;
    }

        .btn-custom:hover {
            background-color: #7f868d;
        }

    .btn-danger {
        background-color: #dc3545;
        color: white;
    }

        .btn-danger:hover {
            background-color: #c82333;
        }
</style>